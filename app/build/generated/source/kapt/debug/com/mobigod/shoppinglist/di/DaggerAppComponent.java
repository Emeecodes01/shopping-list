// Generated by Dagger (https://dagger.dev).
package com.mobigod.shoppinglist.di;

import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import com.mobigod.shoppinglist.ShoppingListApp;
import com.mobigod.shoppinglist.ShoppingListApp_MembersInjector;
import com.mobigod.shoppinglist.SplashActivity;
import com.mobigod.shoppinglist.SplashActivity_MembersInjector;
import com.mobigod.shoppinglist.data.PreferenceManager;
import com.mobigod.shoppinglist.ui.home.HomeActivity;
import com.mobigod.shoppinglist.ui.shopping.activities.AddShoppingListActivity;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent.Factory> addShoppingListActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> provideSharedPrefProvider;

  private Provider<PreferenceManager> providePreferenceManagerProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(SplashActivity.class, (Provider) splashActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider).put(AddShoppingListActivity.class, (Provider) addShoppingListActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent.Factory get(
          ) {
        return new SplashActivitySubcomponentFactory();}
    };
    this.homeActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent.Factory get() {
        return new HomeActivitySubcomponentFactory();}
    };
    this.addShoppingListActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent.Factory get(
          ) {
        return new AddShoppingListActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = DoubleCheck.provider(AppModule_ProvideContextFactory.create(appModuleParam, applicationProvider));
    this.provideSharedPrefProvider = DoubleCheck.provider(AppModule_ProvideSharedPrefFactory.create(appModuleParam, provideContextProvider));
    this.providePreferenceManagerProvider = DoubleCheck.provider(AppModule_ProvidePreferenceManagerFactory.create(appModuleParam, provideSharedPrefProvider));
  }

  @Override
  public void inject(ShoppingListApp app) {
    injectShoppingListApp(app);}

  private ShoppingListApp injectShoppingListApp(ShoppingListApp instance) {
    ShoppingListApp_MembersInjector.injectActivityDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class SplashActivitySubcomponentFactory implements ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl implements ActivityBuilder_ProvideSplashActivityInjector.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivity arg0) {

    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);}

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      SplashActivity_MembersInjector.injectPreferenceManager(instance, DaggerAppComponent.this.providePreferenceManagerProvider.get());
      return instance;
    }
  }

  private final class HomeActivitySubcomponentFactory implements ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent create(
        HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements ActivityBuilder_ProvideHomeActivityInjector.HomeActivitySubcomponent {
    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

    }

    @Override
    public void inject(HomeActivity arg0) {
    }
  }

  private final class AddShoppingListActivitySubcomponentFactory implements ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent create(
        AddShoppingListActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddShoppingListActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddShoppingListActivitySubcomponentImpl implements ActivityBuilder_ProvideAddShoppingListInjector.AddShoppingListActivitySubcomponent {
    private AddShoppingListActivitySubcomponentImpl(AddShoppingListActivity arg0) {

    }

    @Override
    public void inject(AddShoppingListActivity arg0) {
    }
  }
}
