// Generated by Dagger (https://dagger.dev).
package com.mobigod.shoppinglist.di;

import com.mobigod.shoppinglist.data.PreferenceManager;
import com.mobigod.shoppinglist.data.ShoppingDb;
import com.mobigod.shoppinglist.data.source.LocalDSContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideLocalDataSourceFactory implements Factory<LocalDSContract> {
  private final AppModule module;

  private final Provider<PreferenceManager> preferenceManagerProvider;

  private final Provider<ShoppingDb> databaseProvider;

  public AppModule_ProvideLocalDataSourceFactory(AppModule module,
      Provider<PreferenceManager> preferenceManagerProvider,
      Provider<ShoppingDb> databaseProvider) {
    this.module = module;
    this.preferenceManagerProvider = preferenceManagerProvider;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public LocalDSContract get() {
    return provideLocalDataSource(module, preferenceManagerProvider.get(), databaseProvider.get());
  }

  public static AppModule_ProvideLocalDataSourceFactory create(AppModule module,
      Provider<PreferenceManager> preferenceManagerProvider,
      Provider<ShoppingDb> databaseProvider) {
    return new AppModule_ProvideLocalDataSourceFactory(module, preferenceManagerProvider, databaseProvider);
  }

  public static LocalDSContract provideLocalDataSource(AppModule instance,
      PreferenceManager preferenceManager, ShoppingDb database) {
    return Preconditions.checkNotNull(instance.provideLocalDataSource(preferenceManager, database), "Cannot return null from a non-@Nullable @Provides method");
  }
}
